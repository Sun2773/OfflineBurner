#include "flash_blob.h"

/*
 * {chip_name} SRAM布局 (基址0x{algo_start:08X}):
 *
 * 0x{algo_start:08X} ┌─────────────────┐
 *            │ Flash Algorithm │  <- algo_start (算法代码)
 *            │    Code         │
 * 0x{prog_buffer_addr:08X} ├─────────────────┤
 *            │ Program Buffer  │  <- program_buffer (数据缓冲区)
 *            │  (1024 bytes)   │
 * 0x{static_data_addr:08X} ├─────────────────┤
 *            │  Static Data    │  <- static_base (全局/静态变量)
 *            │     Area        │
 * 0x{stack_addr:08X} ├─────────────────┤
 *            │     Stack       │  <- stack_pointer (栈空间)
 *            │   (grows down)  │
 *            │                 │
 *            │ ............... │
 *
 */

// Flash programming algorithm code
// Functions:
{function_comments}

static const uint32_t flash_code[] = {{
    // clang-format off
    0x{algo_start_marker:08X},                                      // +0x0000
{flash_code_data}
    // clang-format on
}};

// Flash sector information
static const sector_info_t sector_info[] = {{
{sector_info_data}
}};

// Flash programming target configuration
const program_target_t _{chip_name_lower}_ = {{
    0x{init_addr:08X},   // Init
    0x{uninit_addr:08X},   // UnInit
    0x{erase_chip_addr:08X},   // EraseChip
    0x{erase_sector_addr:08X},   // EraseSector
    0x{program_page_addr:08X},   // ProgramPage
    {{
        0x{bkpt_addr:08X},   // BKPT : 断点地址 (算法起始+1，Thumb模式)
        0x{rsb_addr:08X},   // RSB  : 静态数据基址
        0x{rsp_addr:08X},   // RSP  : 栈指针地址
    }},
    0x{prog_buffer_addr:08X},           // 编程缓冲区地址
    0x{algo_start:08X},           // 算法代码起始地址
    sizeof(flash_code),   // 算法代码大小
    flash_code,           // 算法代码数据指针
    0x{prog_buffer_size:08X},           // 编程缓冲区大小

    sector_info,                                    // 扇区信息指针
    sizeof(sector_info) / sizeof(sector_info[0]),   // 扇区数量
}};